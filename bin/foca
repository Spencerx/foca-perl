#!/usr/local/bin/perl
# 
# foca
# 
# Author(s): Pablo Fischer (pfs@yahoo-inc.com)
# Created: 06/19/2012 09:16:07 PM UTC 09:16:07 PM

use strict;
use warnings;
use Data::Dumper;
use Digest::MD5 qw(md5_hex);
use FindBin;
use Ir;
use Seco::Getopt;
use YAML::Syck;
use lib "$FindBin::RealBin/../lib/";
use Yahoo::UNI::SE::Foca::Client;

# Take a guess where is the config file.
my $default_cf = '/home/y/conf/foca/client.yaml';
$default_cf = "$FindBin::RealBin/../conf/foca/client.yaml" unless (-f $default_cf);

my $opt = Seco::Getopt->new(
        options => {
            'c|config=s'        => 'Path to foca client config',
            'r|range=s'         => 'Range of hosts to use',
            'p|port=i'          => 'Alternative HTTP port to use',
            'y|yca-role=s'      => 'Alternative YCA role to use',
            'm|maxflight=i'     => 'Max number of hosts to connect at once',
            't|timeout=s'       => 'Global timeout (secs) for each host',
            'connect-timeout=i' => 'Connection timeout (secs) for each host',
            'g|only-good'       => 'Only show output of successful hosts',
            'a|aggregate'       => 'Show aggregated data (SLOW!)',
            's|summary'         => 'Show summary of good/bad hosts',
            'debug'             => 'Be more verbose',
        },
        default => {
            'm'                 => 15,
            't'                 => 60,
            'c'                 => $default_cf,
            'connect-timeout'   => 5,
        },
        required => [
            'r',
        ],
        description => "Foca client");

my $config          = $opt->get('c');
my $range           = $opt->get('r');
my $debug           = $opt->get('debug') || 0;
my $maxflight       = $opt->get('m');
my $timeout         = $opt->get('t');
my $connect_timeout = $opt->get('connect-timeout');
my $only_good       = $opt->get('g');
my $aggregate       = $opt->get('a');
my $summary         = $opt->get('s');
my $settings        = LoadFile($config) if (-f $config);

# Ok, lets take a look
my $port            = $opt->get('p') || $settings->{'port'} || undef;
my $yca_role        = $opt->get('y') || $settings->{'yca_role'} || undef;

$opt->usage("No --port was given or found in config") unless $port;
$opt->usage("No --yca-role was given or found in config") unless $yca_role;

my $client = Yahoo::UNI::SE::Foca::Client->new(
    maxflight       => $maxflight,
    timeout         => $timeout,
    connect_timeout => $connect_timeout, 
    port            => $port,
    yca_role        => $yca_role,
    debug           => $debug);

my $command  = shift @ARGV;

$opt->usage('Please provide a command (with its args if they are needed)') unless
    $command;

my $aggdata  = {};
my (@good, @bad);
my $iterator = $client->run($range, $command, {
    on_host => \&parse_host});

if ($aggregate) {
    while(my($k, $v) = each %{$aggdata}) {
        my $range = Ir::compress_range($v->{'hosts'});
        print "$range: $v->{'output'}\n";
    }
} 

if ($summary) {
    my ($total_good, $total_bad) = (scalar @good, scalar @bad);
    my $range_good = @good ? Ir::compress_range(\@good) : '';
    my $range_bad  = @bad  ? Ir::compress_range(\@bad) : '';

    print "Failed ($total_bad) $range_bad\n";
    print "Succeeded ($total_good) $range_good\n";
}

sub parse_host {
    my ($host) = @_;
    my $output = '';
    my $show   = 1;
    if ($host->{'ok'}) {
        $output = "$host->{'output'}";
        push(@good, $host->{'hostname'}) if $summary;
    } else {
        $output = "ERROR: $host->{'output'}";
        push(@bad, $host->{'hostname'}) if $summary;
    }
    if ($aggregate) {
        my $md5 = md5_hex($output);
        $aggdata->{$md5} = {
            'output'    => $output} unless $aggdata->{$md5};
        push(@{$aggdata->{$md5}->{'hosts'}}, $host->{'hostname'});
    } else {
        return if (!$host->{'ok'} and $only_good);
        print "$host->{'hostname'}: $output\n";
    }
}

